/**
 * auto generated, DO NOT EDIT THIS FILE
 */
#pragma once

#include <gmock/gmock.h>

#include "adapters/IAdapter.h"
#include "adapters/I{{ adapter_name }}.h"
#include "services/I{{ service_name }}.h"

using ::testing::_;
using ::testing::Invoke;

class Mock{{ service_name }} : public vcf::I{{ service_name }}
{
public:
    Mock{{ service_name }}(const vcf::weakHandle<vcf::IVislaServiceCore>& vislaServiceCore);
    ~Mock{{ service_name }}() override = default;

{% for method in method_list %}
    MOCK_METHOD({{ return_list[loop.index0] }}, 
                {{method}}, 
                ({% for arg in arg_list[loop.index0][method] %}{{arg}}{{ "," if not loop.last }}{% endfor %}), 
                ({{ keyword_list[loop.index0] }}));
{% endfor %}

    std::shared_ptr<vcf::I{{ adapter_name }}> &getMockAdapter()
    {
        return mMock{{ adapter_name }};
    }

    static std::shared_ptr<I{{ service_name }}> createMockInstance(const vcf::weakHandle<vcf::IVislaServiceCore>& serviceCore)
    {
        return std::make_shared<Mock{{ service_name }}>(serviceCore);
    }

private:
    std::shared_ptr<I{{ service_name }}> real{{ service_name }}{ nullptr };
    std::shared_ptr<I{{ adapter_name }}> mMock{{ adapter_name }}{ nullptr };
    vcf::weakHandle<vcf::IVislaServiceCore> mVislaServiceCore;
};

